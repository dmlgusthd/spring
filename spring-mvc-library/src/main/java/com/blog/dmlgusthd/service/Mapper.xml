<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.blog.dmlgusthd.Mapper">
<!-- 회원 등록하는 쿼리 -->
	<insert id="insertMember" 
			parameterType="com.blog.dmlgusthd.service.Member">
		INSERT INTO member(
			m_name,
			m_phone,
			m_address, 
			m_special) 
		VALUES(
			#{mName},
			#{mPhone},
			#{mAddress},
			#{mSpecial})
	</insert>
<!-- 도서등록 하는 쿼리 -->	
	<insert id="insertBook" 
			parameterType="com.blog.dmlgusthd.service.BManagement">
		INSERT INTO book_management(
			bm_name,
			bm_type,
			bm_publisher, 
			bm_writer) 
		VALUES(
			#{bmName},
			#{bmType},
			#{bmPublisher},
			#{bmWriter})
	</insert>
<!-- 대상책의 이름과 최초대여 날짜 등록하는 쿼리(해당 도서가 없으면 INSERT하고 있으면 안한다) -->
	<insert id="insertInfo"
			parameterType="com.blog.dmlgusthd.service.BRent">
		INSERT INTO book_info (bm_name)  
		SELECT #{bmName} FROM DUAL  
		WHERE NOT EXISTS (
		SELECT * FROM book_info WHERE bm_name=#{bmName})   
	</insert>
<!-- 대여등록 하는 쿼리 -->
	<insert id="insertRent"
			parameterType="com.blog.dmlgusthd.service.BRent">
		INSERT INTO book_rent(
			br_no,
			bm_name,
			m_name,
			br_start, 
			br_end,
			br_pay) 
		VALUES(
			now(),
			#{bmName},
			#{mName},
			#{brStart},
			#{brEnd},
			#{brPay})
	</insert>
<!-- 반납시 대여등록 리스트에서 삭제하는 쿼리 -->
	<delete id="deleteRent">
		DELETE FROM book_rent
		WHERE bm_name=#{bmName}
	</delete>
<!-- 반납시 해당도서의 도서대여상태를 '가능'으로 바꿔주는 쿼리 -->	
	<update id="updateManagement">
		UPDATE book_management SET
			bm_check='가능'
		WHERE bm_name=#{bmName}
	</update>
<!-- 반납시 해당도서의 대여횟수와 총대여일을 추가하는 쿼리 -->
	<update id="updateInfo">
		UPDATE book_info SET 
			bi_count=bi_count+1, 
			bi_day=bi_day+#{day} 
		WHERE bm_name=#{bmName}
	</update>
<!-- 폐기등록 -->	
	<update id="InsertBookDisuse">
		UPDATE book_management SET
			bm_check='폐기대상',
			bm_disuse=now()
		WHERE bm_sn=#{bmSn}
	</update>

<!-- 회원정보 수정하는 쿼리 -->
	<update id="updateMember"
			parameterType="com.blog.dmlgusthd.service.Member">
		UPDATE member SET
			m_name=#{mName},
			m_phone=#{mPhone},
			m_address=#{mAddress},
			m_special=#{mSpecial}
		WHERE m_no=#{mNo}
	</update>
<!-- 선입금했던 금액 가져오기 쿼리 -->
	<select id="pay" resultType="int">
		SELECT br_pay 
		FROM book_rent 
		WHERE bm_name=#{bmName}
	</select>
<!-- 현재날짜에서 빌린날짜의 일수차이 구하기 쿼리 -->
	<select id="day" resultType="int">
		SELECT TIMESTAMPDIFF(DAY, br_start, NOW()) 
		FROM book_rent WHERE bm_name=#{bmName}
	</select>
<!-- 폐기등록 된 시점 이후 100일 지난 데이터 삭제하기 쿼리 -->
	<delete id="disuseDelete">
		<![CDATA[DELETE FROM book_management 
		WHERE DATE_ADD(bm_disuse, INTERVAL '100' DAY) < now()]]>
	</delete>
<!-- 해당 도서의 이름,종류,출판사,저자 가져오기 쿼리 -->	
	<select id="selectOneBook"
			resultType="com.blog.dmlgusthd.service.BManagement">
		SELECT
			bm_sn as bmSn,
			bm_name as bmName,
			bm_type as bmType,
			bm_publisher as bmPublisher, 
			bm_writer as bmWriter
		FROM book_management
		WHERE bm_name=#{bmName}
	</select>
<!-- 해당 도서의 첫 대여일,대여횟수,일수 가져오기 쿼리 -->
	<select id="selectBookInfo"
			resultType="com.blog.dmlgusthd.service.BInfo">
		SELECT
			bi_firstrent as biFirstrent,
			bi_count as biCount,
			bi_day as biDay
		FROM book_info
		WHERE bm_name=#{bmName}
	</select>	
<!-- 아이디 비번 일치하는지 -->
	<select id="selectIdPw"
			resultType="com.blog.dmlgusthd.service.Manager">
		SELECT 
			m_id as mId,
			m_pw as mPw
		FROM manager 
		WHERE m_id=#{id}
		AND m_pw=#{pw}
	</select>
<!-- 회비 납부한 회원인지 아닌지 정보 가져온다 -->	
	<select id="selectSpecail"
			resultType="com.blog.dmlgusthd.service.Member">
		SELECT m_special as mSpecial
		FROM member 
		WHERE m_phone=#{mPhone}
	</select>
<!-- 대여등록 페이지에 이름 목록 뿌려주기 -->
	<select id="selectName"
			resultType="com.blog.dmlgusthd.service.Member">
		SELECT concat(m_name,'/',m_phone) as mName
		FROM member
	</select>
<!-- 멤버 한명의 정보 가져오기 쿼리 -->
	<select id="selectOneMember"
			resultType="com.blog.dmlgusthd.service.Member">
		SELECT 
			m_no as mNo,
			m_name as mName,
			m_phone as mPhone,
			m_address as mAddress,
			m_special as mSpecial
		FROM member
		WHERE m_no=#{mNo}
	</select>
<!-- 멤버 리스트 가져오기 쿼리 -->	
	<select id="selectMember" parameterType="Map"
			resultType="com.blog.dmlgusthd.service.Member">
			SELECT 
				m_no as mNo,
				m_name as mName,
				m_phone as mPhone,
				m_address as mAddress,
				m_special as mSpecial
			FROM member
			ORDER BY m_no DESC 
			LIMIT #{beginRow},#{pagePerRow}
	</select>	
	<select id="selectTotalMemberCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM member
	</select>
<!-- 도서리스트 가져오는 쿼리 -->
	<select id="selectBook" parameterType="Map"
			resultType="com.blog.dmlgusthd.service.BManagement">
			SELECT 
				bm_sn as bmSn,
				bm_name as bmName,
				bm_check as bmCheck
			FROM book_management
			ORDER BY bm_sn DESC 
			LIMIT #{beginRow},#{pagePerRow}
	</select>
	<select id="selectTotalBookCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM book_management
	</select>
<!-- 등록된 도서와 대여등록 된 도서를 비교하여 일치하는 것이 있으면(대여할경우) 도서대여상태를 '불가능'으로 바꾸는 쿼리 -->
	<update id="bookCheck">
		UPDATE book_management A INNER JOIN book_rent B
		ON A.bm_name = B.bm_name
		SET A.bm_check = '불가능'
	</update>
<!-- 대여된 도서의 정보를 가져오는 쿼리 -->
	<select id="selectRentInfo" parameterType="Map"
			resultType="com.blog.dmlgusthd.service.BRent">
			SELECT 
				bm_name as bmName,
				m_name as mName,
				br_start as brStart,
				br_end as brEnd,
				br_pay as brPay
			FROM book_rent
			WHERE bm_name=#{bmName}
	</select>
<!-- 대여등록 리스트 가져오는 쿼리 -->
	<select id="selectRent" parameterType="Map"
			resultType="com.blog.dmlgusthd.service.BRent">
			SELECT 
				br_no as brNo,
				bm_name as bmName,
				m_name as mName
			FROM book_rent
			ORDER BY br_num DESC 
			LIMIT #{beginRow},#{pagePerRow}
	</select>
	<select id="selectTotalRentCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM book_rent
	</select>

</mapper>